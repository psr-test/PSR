package com.serverless.model;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.serverless.DynamoDBAdapter;
import jdk.internal.jline.internal.Nullable;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.lang.invoke.MethodHandles;
import java.util.*;

@DynamoDBTable(tableName = "PLACEHOLDER_bookS_TABLE_NAME")
public class BookAction {
    public enum Action {
        BORROW, GIVE_BACK;
    }

    private static final String TABLE_NAME = System.getenv("BOOK_ACTION_TABLE_NAME");
    private static final Logger logger = LogManager.getLogger(MethodHandles.lookup().lookupClass());
    private static final DynamoDBAdapter dbAdapter;
    private static final DynamoDBMapper mapper;
    private static final AmazonDynamoDB client;
    private String id;
    private String bookId;
    private String person;
    private Action action;
    private String timestamp;

    static {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
                .build();
        dbAdapter = DynamoDBAdapter.getInstance();
        mapper = dbAdapter.createDbMapper(mapperConfig);
        client = dbAdapter.getClient();
    }

    public BookAction() { }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBHashKey(attributeName = "bookId")
    public String getBookId() { return bookId; }
    public void setBookId(String bookId) { this.bookId = bookId; }

    @DynamoDBRangeKey(attributeName = "person")
    public String getPerson() {
        return person;
    }
    public void setPerson(String person) {
        this.person = person;
    }

    @DynamoDBRangeKey(attributeName = "action")
    public String getAction() {
        return action.name();
    }
    public void setAction(String action) {
        this.action = Action.valueOf(action);
    }

    @DynamoDBAttribute(attributeName = "timestamp")
    public String getTimestamp() {
        return timestamp;
    }
    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    public static List<BookAction> list() {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<BookAction> results = mapper.scan(BookAction.class, scanExp);
        for (BookAction action : results) {
            logger.info("BookActions - list(): " + action.toString());
        }
        return results;
    }

    public static Optional<BookAction> get(String id) {
        Map<String, AttributeValue> av = Collections.singletonMap(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<BookAction> queryExp = new DynamoDBQueryExpression<BookAction>()
                .withKeyConditionExpression("bookId = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<BookAction> result = mapper.query(BookAction.class, queryExp);

        BookAction action;
        if (!result.isEmpty()) {
            action = result.get(0);
            logger.info("BookActions - get(): action - " + action.toString());
            return Optional.of(action);
        } else {
            logger.info("BookActions - get(): action - Not Found.");
            return Optional.empty();
        }
    }

    public void save() {
        logger.info("BookActions - save(): " + toString());
        mapper.save(this);
    }
}